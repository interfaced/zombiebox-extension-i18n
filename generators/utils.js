const escodegen = require('escodegen');
const b = require('ast-types').builders;
const {ASTNode} = require('./types');

/**
 * @param {string} packageName
 * @param {string} fileName
 * @param {Array<string>} locales
 * @yield {Array<string|Object>}
 */
function* iterateCLDRData(packageName, fileName, locales) {
	for (const locale of locales) {
		try {
			// eslint-disable-next-line global-require
			yield [locale, require(`${packageName}/main/${locale}/${fileName}`)];
		} catch (e) {
			console.warn(`Can't find "${packageName}/${fileName}" for locale "${locale}"`);
		}
	}
}

/**
 * @param {Object} value
 * @return {ASTNode}
 */
function convertJSONValueToAST(value) {
	const convertArray = (array) => b.arrayExpression(array.map(convertJSONValueToAST));

	const convertObjectOrLiteral = (objectOrLiteral) =>
		typeof objectOrLiteral === 'object' ?
			b.objectExpression(
				Object.keys(objectOrLiteral)
					.map((key) => b.property('init', b.literal(key), convertJSONValueToAST(objectOrLiteral[key])))
			) :
			b.literal(value);

	return Array.isArray(value) ?
		convertArray(value) :
		convertObjectOrLiteral(value);
}

/**
 * @param {Object<string, ASTNode>} data
 * @param {string} dataType
 * @param {Array<string>=} imports
 * @return {string}
 */
function generateDataModule(data, dataType, imports = []) {
	const dataDeclaration = b.variableDeclaration('const', [
		b.variableDeclarator(
			b.identifier('data'),
			b.objectExpression(
				Object.keys(data)
					.map((locale) => b.property('init', b.literal(locale), data[locale]))
			)
		)
	]);

	const dataExport = generateDefaultExport(b.identifier('data'));

	const localeTypeImport = generateImport('Locale', 'i18n/types');
	imports.unshift(localeTypeImport);

	localeTypeImport.leadingComments = [b.line(' This file is autogenerated. Do not edit manually!')];
	dataDeclaration.leadingComments = [b.block(`* @type {Object<Locale, ${dataType}>}`)];

	const program = b.program([...imports, dataDeclaration, dataExport]);

	return escodegen.generate(program, {
		comment: true
	});
}

/**
 * @param {string} originalName
 * @param {string} path
 * @param {boolean} defaultImport
 * @return {*}
 */
function generateImport(originalName, path, defaultImport = false) {
	return b.importDeclaration(
		[
			defaultImport ?
				b.importDefaultSpecifier(b.identifier(originalName)) :
				b.importSpecifier(b.identifier(originalName), b.identifier(originalName))
		],
		b.literal(path)
	);
}

/**
 * @param {ASTNode} declaration
 * @return {*}
 */
function generateDefaultExport(declaration) {
	return b.exportDefaultDeclaration(declaration);
}

module.exports = {
	iterateCLDRData,
	convertJSONValueToAST,
	generateImport,
	generateDataModule
};
