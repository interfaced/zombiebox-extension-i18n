const escodegen = require('escodegen');
const b = require('ast-types').builders;

/**
 * @param {Array<string>} chunks
 * @return {ASTNode}
 */
function createMemberExpression(chunks) {
	const property = b.identifier(chunks.pop());

	return b.memberExpression(
		chunks.length > 1 ?
			createMemberExpression(chunks) :
			b.identifier(chunks.pop()),
		property
	);
}

/**
 * @param {Array<string>} calleeChunks
 * @param {Array<*>} args
 * @return {ASTNode}
 */
function createCallExpression(calleeChunks, args) {
	return b.callExpression(
		createMemberExpression(calleeChunks),
		args.map((arg) => b.literal(arg))
	);
}

/**
 * @param {Object} value
 * @return {ASTNode}
 */
function convertJSONValueToAST(value) {
	const convertArray = (array) => b.arrayExpression(array.map(convertJSONValueToAST));

	const convertObjectOrLiteral = (objectOrLiteral) =>
		typeof objectOrLiteral === 'object' ?
			b.objectExpression(
				Object.keys(objectOrLiteral)
					.map((key) => b.property('init', b.literal(key), convertJSONValueToAST(objectOrLiteral[key])))
			) :
			b.literal(value);

	return Array.isArray(value) ?
		convertArray(value) :
		convertObjectOrLiteral(value);
}

/**
 * @param {string} namespace
 * @param {Array<string>} dependencies
 * @param {string} dataType
 * @param {Object<string, ASTNode>} data
 * @return {string}
 */
function generateDataModule(namespace, dependencies, dataType, data) {
	const namespaceDeclaration = b.expressionStatement(
		createCallExpression(['goog', 'provide'], [namespace])
	);

	const dependencyDeclarations = ['zb.i18n.Locale', ...dependencies]
		.map((dependency) => b.expressionStatement(
			createCallExpression(['goog', 'require'], [dependency])
		));

	const dataAssignment = b.expressionStatement(
		b.assignmentExpression(
			'=',
			createMemberExpression(namespace.split('.')),
			b.objectExpression(
				Object.keys(data)
					.map((locale) => b.property('init', b.literal(locale), data[locale]))
			)
		)
	);

	namespaceDeclaration.leadingComments = [b.line(' This file is autogenerated. Do not edit manually!')];
	dataAssignment.leadingComments = [b.block(`* @type {Object<zb.i18n.Locale, ${dataType}>}`)];

	return escodegen.generate(b.program([namespaceDeclaration, ...dependencyDeclarations, dataAssignment]), {
		comment: true
	});
}

module.exports = {
	createMemberExpression,
	convertJSONValueToAST,
	generateDataModule
};
